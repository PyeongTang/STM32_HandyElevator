
HandyElevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002ff4  08002ff4  00003ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003034  08003034  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800303c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003048  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003048  00005138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba4b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224c  00000000  00000000  00010a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00012cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000962  00000000  00000000  00013910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018081  00000000  00000000  00014272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107c2  00000000  00000000  0002c2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e992  00000000  00000000  0003cab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe0  00000000  00000000  000cb48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ce46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fdc 	.word	0x08002fdc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002fdc 	.word	0x08002fdc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AP_setup>:
 *      Author: Lee JaePyeong
 */

#include "ap.h"

void AP_setup(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HW_init();
 80004cc:	f000 fdbe 	bl	800104c <HW_init>
};
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <AP_loop>:

void AP_loop(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	while (1){
		HE_run();
 80004d8:	f000 fcf6 	bl	8000ec8 <HE_run>
 80004dc:	e7fc      	b.n	80004d8 <AP_loop+0x4>
	...

080004e0 <FND_init>:
#include "fnd.h"

FND fnd[8] = {0,};
uint8_t fndDigitValue = 0;

void FND_init (){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	fndDigitValue 		=0;
 80004e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000610 <FND_init+0x130>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	fnd[0].gpioPort		=GPIOA;
 80004ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000614 <FND_init+0x134>)
 80004ec:	4a4a      	ldr	r2, [pc, #296]	@ (8000618 <FND_init+0x138>)
 80004ee:	601a      	str	r2, [r3, #0]
	fnd[0].pinNumber	=GPIO_PIN_5;
 80004f0:	4b48      	ldr	r3, [pc, #288]	@ (8000614 <FND_init+0x134>)
 80004f2:	2220      	movs	r2, #32
 80004f4:	809a      	strh	r2, [r3, #4]
	fnd[0].fndState		=false;
 80004f6:	4b47      	ldr	r3, [pc, #284]	@ (8000614 <FND_init+0x134>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	719a      	strb	r2, [r3, #6]
	fnd[0].onState		=GPIO_PIN_SET;
 80004fc:	4b45      	ldr	r3, [pc, #276]	@ (8000614 <FND_init+0x134>)
 80004fe:	2201      	movs	r2, #1
 8000500:	71da      	strb	r2, [r3, #7]
	fnd[0].offState		=GPIO_PIN_RESET;
 8000502:	4b44      	ldr	r3, [pc, #272]	@ (8000614 <FND_init+0x134>)
 8000504:	2200      	movs	r2, #0
 8000506:	721a      	strb	r2, [r3, #8]


	fnd[1].gpioPort		=GPIOA;
 8000508:	4b42      	ldr	r3, [pc, #264]	@ (8000614 <FND_init+0x134>)
 800050a:	4a43      	ldr	r2, [pc, #268]	@ (8000618 <FND_init+0x138>)
 800050c:	60da      	str	r2, [r3, #12]
	fnd[1].pinNumber	=GPIO_PIN_6;
 800050e:	4b41      	ldr	r3, [pc, #260]	@ (8000614 <FND_init+0x134>)
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	821a      	strh	r2, [r3, #16]
	fnd[1].fndState		=false;
 8000514:	4b3f      	ldr	r3, [pc, #252]	@ (8000614 <FND_init+0x134>)
 8000516:	2200      	movs	r2, #0
 8000518:	749a      	strb	r2, [r3, #18]
	fnd[1].onState		=GPIO_PIN_SET;
 800051a:	4b3e      	ldr	r3, [pc, #248]	@ (8000614 <FND_init+0x134>)
 800051c:	2201      	movs	r2, #1
 800051e:	74da      	strb	r2, [r3, #19]
	fnd[1].offState		=GPIO_PIN_RESET;
 8000520:	4b3c      	ldr	r3, [pc, #240]	@ (8000614 <FND_init+0x134>)
 8000522:	2200      	movs	r2, #0
 8000524:	751a      	strb	r2, [r3, #20]


	fnd[2].gpioPort		=GPIOA;
 8000526:	4b3b      	ldr	r3, [pc, #236]	@ (8000614 <FND_init+0x134>)
 8000528:	4a3b      	ldr	r2, [pc, #236]	@ (8000618 <FND_init+0x138>)
 800052a:	619a      	str	r2, [r3, #24]
	fnd[2].pinNumber	=GPIO_PIN_7;
 800052c:	4b39      	ldr	r3, [pc, #228]	@ (8000614 <FND_init+0x134>)
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	839a      	strh	r2, [r3, #28]
	fnd[2].fndState		=false;
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <FND_init+0x134>)
 8000534:	2200      	movs	r2, #0
 8000536:	779a      	strb	r2, [r3, #30]
	fnd[2].onState		=GPIO_PIN_SET;
 8000538:	4b36      	ldr	r3, [pc, #216]	@ (8000614 <FND_init+0x134>)
 800053a:	2201      	movs	r2, #1
 800053c:	77da      	strb	r2, [r3, #31]
	fnd[2].offState		=GPIO_PIN_RESET;
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <FND_init+0x134>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2020 	strb.w	r2, [r3, #32]


	fnd[3].gpioPort		=GPIOB;
 8000546:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <FND_init+0x134>)
 8000548:	4a34      	ldr	r2, [pc, #208]	@ (800061c <FND_init+0x13c>)
 800054a:	625a      	str	r2, [r3, #36]	@ 0x24
	fnd[3].pinNumber	=GPIO_PIN_6;
 800054c:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <FND_init+0x134>)
 800054e:	2240      	movs	r2, #64	@ 0x40
 8000550:	851a      	strh	r2, [r3, #40]	@ 0x28
	fnd[3].fndState		=false;
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <FND_init+0x134>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	fnd[3].onState		=GPIO_PIN_SET;
 800055a:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <FND_init+0x134>)
 800055c:	2201      	movs	r2, #1
 800055e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	fnd[3].offState		=GPIO_PIN_RESET;
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <FND_init+0x134>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c


	fnd[4].gpioPort		=GPIOC;
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <FND_init+0x134>)
 800056c:	4a2c      	ldr	r2, [pc, #176]	@ (8000620 <FND_init+0x140>)
 800056e:	631a      	str	r2, [r3, #48]	@ 0x30
	fnd[4].pinNumber	=GPIO_PIN_7;
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <FND_init+0x134>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	869a      	strh	r2, [r3, #52]	@ 0x34
	fnd[4].fndState		=false;
 8000576:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <FND_init+0x134>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	fnd[4].onState		=GPIO_PIN_SET;
 800057e:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <FND_init+0x134>)
 8000580:	2201      	movs	r2, #1
 8000582:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	fnd[4].offState		=GPIO_PIN_RESET;
 8000586:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <FND_init+0x134>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38


	fnd[5].gpioPort		=GPIOA;
 800058e:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <FND_init+0x134>)
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <FND_init+0x138>)
 8000592:	63da      	str	r2, [r3, #60]	@ 0x3c
	fnd[5].pinNumber	=GPIO_PIN_9;
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <FND_init+0x134>)
 8000596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800059a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	fnd[5].fndState		=false;
 800059e:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <FND_init+0x134>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	fnd[5].onState		=GPIO_PIN_SET;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <FND_init+0x134>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	fnd[5].offState		=GPIO_PIN_RESET;
 80005ae:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <FND_init+0x134>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44


	fnd[6].gpioPort		=GPIOA;
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <FND_init+0x134>)
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <FND_init+0x138>)
 80005ba:	649a      	str	r2, [r3, #72]	@ 0x48
	fnd[6].pinNumber	=GPIO_PIN_8;
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <FND_init+0x134>)
 80005be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	fnd[6].fndState		=false;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <FND_init+0x134>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	fnd[6].onState		=GPIO_PIN_SET;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <FND_init+0x134>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	fnd[6].offState		=GPIO_PIN_RESET;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <FND_init+0x134>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50


	fnd[7].gpioPort		=GPIOB;
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <FND_init+0x134>)
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <FND_init+0x13c>)
 80005e2:	655a      	str	r2, [r3, #84]	@ 0x54
	fnd[7].pinNumber	=GPIO_PIN_10;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <FND_init+0x134>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	fnd[7].fndState		=false;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <FND_init+0x134>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	fnd[7].onState		=GPIO_PIN_SET;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <FND_init+0x134>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	fnd[7].offState		=GPIO_PIN_RESET;
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <FND_init+0x134>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
};
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20000088 	.word	0x20000088
 8000614:	20000028 	.word	0x20000028
 8000618:	40020000 	.word	0x40020000
 800061c:	40020400 	.word	0x40020400
 8000620:	40020800 	.word	0x40020800

08000624 <FND_setDecimal>:
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].offState);
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
}

void FND_setDecimal(uint8_t bcdValue){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if (bcdValue > 9) return;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b09      	cmp	r3, #9
 8000632:	d83b      	bhi.n	80006ac <FND_setDecimal+0x88>

	fndDigitValue = bcdValue;
 8000634:	4a1f      	ldr	r2, [pc, #124]	@ (80006b4 <FND_setDecimal+0x90>)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	7013      	strb	r3, [r2, #0]
	switch (bcdValue){
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b09      	cmp	r3, #9
 800063e:	d836      	bhi.n	80006ae <FND_setDecimal+0x8a>
 8000640:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <FND_setDecimal+0x24>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000671 	.word	0x08000671
 800064c:	08000677 	.word	0x08000677
 8000650:	0800067d 	.word	0x0800067d
 8000654:	08000683 	.word	0x08000683
 8000658:	08000689 	.word	0x08000689
 800065c:	0800068f 	.word	0x0800068f
 8000660:	08000695 	.word	0x08000695
 8000664:	0800069b 	.word	0x0800069b
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006a7 	.word	0x080006a7
		case 0 : FND_setFND_0(); break;
 8000670:	f000 f822 	bl	80006b8 <FND_setFND_0>
 8000674:	e01b      	b.n	80006ae <FND_setDecimal+0x8a>
		case 1 : FND_setFND_1(); break;
 8000676:	f000 f875 	bl	8000764 <FND_setFND_1>
 800067a:	e018      	b.n	80006ae <FND_setDecimal+0x8a>
		case 2 : FND_setFND_2(); break;
 800067c:	f000 f8c8 	bl	8000810 <FND_setFND_2>
 8000680:	e015      	b.n	80006ae <FND_setDecimal+0x8a>
		case 3 : FND_setFND_3(); break;
 8000682:	f000 f91d 	bl	80008c0 <FND_setFND_3>
 8000686:	e012      	b.n	80006ae <FND_setDecimal+0x8a>
		case 4 : FND_setFND_4(); break;
 8000688:	f000 f970 	bl	800096c <FND_setFND_4>
 800068c:	e00f      	b.n	80006ae <FND_setDecimal+0x8a>
		case 5 : FND_setFND_5(); break;
 800068e:	f000 f9c3 	bl	8000a18 <FND_setFND_5>
 8000692:	e00c      	b.n	80006ae <FND_setDecimal+0x8a>
		case 6 : FND_setFND_6(); break;
 8000694:	f000 fa16 	bl	8000ac4 <FND_setFND_6>
 8000698:	e009      	b.n	80006ae <FND_setDecimal+0x8a>
		case 7 : FND_setFND_7(); break;
 800069a:	f000 fa69 	bl	8000b70 <FND_setFND_7>
 800069e:	e006      	b.n	80006ae <FND_setDecimal+0x8a>
		case 8 : FND_setFND_8(); break;
 80006a0:	f000 fabc 	bl	8000c1c <FND_setFND_8>
 80006a4:	e003      	b.n	80006ae <FND_setDecimal+0x8a>
		case 9 : FND_setFND_9(); break;
 80006a6:	f000 fb0f 	bl	8000cc8 <FND_setFND_9>
 80006aa:	e000      	b.n	80006ae <FND_setDecimal+0x8a>
	if (bcdValue > 9) return;
 80006ac:	bf00      	nop
	}
};
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000088 	.word	0x20000088

080006b8 <FND_setFND_0>:
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].offState);
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
};

void FND_setFND_0(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <FND_setFND_0+0xa8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <FND_setFND_0+0xa8>)
 80006c2:	8891      	ldrh	r1, [r2, #4]
 80006c4:	4a26      	ldr	r2, [pc, #152]	@ (8000760 <FND_setFND_0+0xa8>)
 80006c6:	79d2      	ldrb	r2, [r2, #7]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fb6f 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 80006ce:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <FND_setFND_0+0xa8>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	4a23      	ldr	r2, [pc, #140]	@ (8000760 <FND_setFND_0+0xa8>)
 80006d4:	8a11      	ldrh	r1, [r2, #16]
 80006d6:	4a22      	ldr	r2, [pc, #136]	@ (8000760 <FND_setFND_0+0xa8>)
 80006d8:	7cd2      	ldrb	r2, [r2, #19]
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fb66 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <FND_setFND_0+0xa8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <FND_setFND_0+0xa8>)
 80006e6:	8b91      	ldrh	r1, [r2, #28]
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <FND_setFND_0+0xa8>)
 80006ea:	7fd2      	ldrb	r2, [r2, #31]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb5d 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <FND_setFND_0+0xa8>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000760 <FND_setFND_0+0xa8>)
 80006f8:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80006fa:	4a19      	ldr	r2, [pc, #100]	@ (8000760 <FND_setFND_0+0xa8>)
 80006fc:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fb53 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].onState);
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <FND_setFND_0+0xa8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <FND_setFND_0+0xa8>)
 800070c:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <FND_setFND_0+0xa8>)
 8000710:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fb49 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <FND_setFND_0+0xa8>)
 800071c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800071e:	4a10      	ldr	r2, [pc, #64]	@ (8000760 <FND_setFND_0+0xa8>)
 8000720:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000724:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <FND_setFND_0+0xa8>)
 8000726:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fb3e 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].offState);
 8000730:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <FND_setFND_0+0xa8>)
 8000732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <FND_setFND_0+0xa8>)
 8000736:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 800073a:	4a09      	ldr	r2, [pc, #36]	@ (8000760 <FND_setFND_0+0xa8>)
 800073c:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fb33 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <FND_setFND_0+0xa8>)
 8000748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <FND_setFND_0+0xa8>)
 800074c:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000750:	4a03      	ldr	r2, [pc, #12]	@ (8000760 <FND_setFND_0+0xa8>)
 8000752:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fb28 	bl	8001dac <HAL_GPIO_WritePin>
};
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000028 	.word	0x20000028

08000764 <FND_setFND_1>:

void FND_setFND_1(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].offState);
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <FND_setFND_1+0xa8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <FND_setFND_1+0xa8>)
 800076e:	8891      	ldrh	r1, [r2, #4]
 8000770:	4a26      	ldr	r2, [pc, #152]	@ (800080c <FND_setFND_1+0xa8>)
 8000772:	7a12      	ldrb	r2, [r2, #8]
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fb19 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <FND_setFND_1+0xa8>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4a23      	ldr	r2, [pc, #140]	@ (800080c <FND_setFND_1+0xa8>)
 8000780:	8a11      	ldrh	r1, [r2, #16]
 8000782:	4a22      	ldr	r2, [pc, #136]	@ (800080c <FND_setFND_1+0xa8>)
 8000784:	7cd2      	ldrb	r2, [r2, #19]
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fb10 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <FND_setFND_1+0xa8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1e      	ldr	r2, [pc, #120]	@ (800080c <FND_setFND_1+0xa8>)
 8000792:	8b91      	ldrh	r1, [r2, #28]
 8000794:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <FND_setFND_1+0xa8>)
 8000796:	7fd2      	ldrb	r2, [r2, #31]
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fb07 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].offState);
 800079e:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <FND_setFND_1+0xa8>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a2:	4a1a      	ldr	r2, [pc, #104]	@ (800080c <FND_setFND_1+0xa8>)
 80007a4:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80007a6:	4a19      	ldr	r2, [pc, #100]	@ (800080c <FND_setFND_1+0xa8>)
 80007a8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fafd 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <FND_setFND_1+0xa8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <FND_setFND_1+0xa8>)
 80007b8:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 80007ba:	4a14      	ldr	r2, [pc, #80]	@ (800080c <FND_setFND_1+0xa8>)
 80007bc:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 faf3 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <FND_setFND_1+0xa8>)
 80007c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ca:	4a10      	ldr	r2, [pc, #64]	@ (800080c <FND_setFND_1+0xa8>)
 80007cc:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 80007d0:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <FND_setFND_1+0xa8>)
 80007d2:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fae8 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].offState);
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <FND_setFND_1+0xa8>)
 80007de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e0:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <FND_setFND_1+0xa8>)
 80007e2:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <FND_setFND_1+0xa8>)
 80007e8:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fadd 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <FND_setFND_1+0xa8>)
 80007f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <FND_setFND_1+0xa8>)
 80007f8:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 80007fc:	4a03      	ldr	r2, [pc, #12]	@ (800080c <FND_setFND_1+0xa8>)
 80007fe:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fad2 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000028 	.word	0x20000028

08000810 <FND_setFND_2>:

void FND_setFND_2(){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000814:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <FND_setFND_2+0xac>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a28      	ldr	r2, [pc, #160]	@ (80008bc <FND_setFND_2+0xac>)
 800081a:	8891      	ldrh	r1, [r2, #4]
 800081c:	4a27      	ldr	r2, [pc, #156]	@ (80008bc <FND_setFND_2+0xac>)
 800081e:	79d2      	ldrb	r2, [r2, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fac3 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <FND_setFND_2+0xac>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	4a24      	ldr	r2, [pc, #144]	@ (80008bc <FND_setFND_2+0xac>)
 800082c:	8a11      	ldrh	r1, [r2, #16]
 800082e:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <FND_setFND_2+0xac>)
 8000830:	7cd2      	ldrb	r2, [r2, #19]
 8000832:	4618      	mov	r0, r3
 8000834:	f001 faba 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].offState);
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <FND_setFND_2+0xac>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a1f      	ldr	r2, [pc, #124]	@ (80008bc <FND_setFND_2+0xac>)
 800083e:	8b91      	ldrh	r1, [r2, #28]
 8000840:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <FND_setFND_2+0xac>)
 8000842:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fab0 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <FND_setFND_2+0xac>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000850:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <FND_setFND_2+0xac>)
 8000852:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000854:	4a19      	ldr	r2, [pc, #100]	@ (80008bc <FND_setFND_2+0xac>)
 8000856:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800085a:	4618      	mov	r0, r3
 800085c:	f001 faa6 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].onState);
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <FND_setFND_2+0xac>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <FND_setFND_2+0xac>)
 8000866:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000868:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <FND_setFND_2+0xac>)
 800086a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fa9c 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <FND_setFND_2+0xac>)
 8000876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000878:	4a10      	ldr	r2, [pc, #64]	@ (80008bc <FND_setFND_2+0xac>)
 800087a:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <FND_setFND_2+0xac>)
 8000880:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fa91 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <FND_setFND_2+0xac>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088e:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <FND_setFND_2+0xac>)
 8000890:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000894:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <FND_setFND_2+0xac>)
 8000896:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa86 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <FND_setFND_2+0xac>)
 80008a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008a4:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <FND_setFND_2+0xac>)
 80008a6:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <FND_setFND_2+0xac>)
 80008ac:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fa7b 	bl	8001dac <HAL_GPIO_WritePin>
};
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000028 	.word	0x20000028

080008c0 <FND_setFND_3>:

void FND_setFND_3(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <FND_setFND_3+0xa8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a27      	ldr	r2, [pc, #156]	@ (8000968 <FND_setFND_3+0xa8>)
 80008ca:	8891      	ldrh	r1, [r2, #4]
 80008cc:	4a26      	ldr	r2, [pc, #152]	@ (8000968 <FND_setFND_3+0xa8>)
 80008ce:	79d2      	ldrb	r2, [r2, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fa6b 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 80008d6:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <FND_setFND_3+0xa8>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	4a23      	ldr	r2, [pc, #140]	@ (8000968 <FND_setFND_3+0xa8>)
 80008dc:	8a11      	ldrh	r1, [r2, #16]
 80008de:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <FND_setFND_3+0xa8>)
 80008e0:	7cd2      	ldrb	r2, [r2, #19]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa62 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <FND_setFND_3+0xa8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000968 <FND_setFND_3+0xa8>)
 80008ee:	8b91      	ldrh	r1, [r2, #28]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000968 <FND_setFND_3+0xa8>)
 80008f2:	7fd2      	ldrb	r2, [r2, #31]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fa59 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <FND_setFND_3+0xa8>)
 80008fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000968 <FND_setFND_3+0xa8>)
 8000900:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <FND_setFND_3+0xa8>)
 8000904:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fa4f 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <FND_setFND_3+0xa8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a15      	ldr	r2, [pc, #84]	@ (8000968 <FND_setFND_3+0xa8>)
 8000914:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <FND_setFND_3+0xa8>)
 8000918:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fa45 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <FND_setFND_3+0xa8>)
 8000924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <FND_setFND_3+0xa8>)
 8000928:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <FND_setFND_3+0xa8>)
 800092e:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fa3a 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <FND_setFND_3+0xa8>)
 800093a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <FND_setFND_3+0xa8>)
 800093e:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <FND_setFND_3+0xa8>)
 8000944:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fa2f 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <FND_setFND_3+0xa8>)
 8000950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <FND_setFND_3+0xa8>)
 8000954:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000958:	4a03      	ldr	r2, [pc, #12]	@ (8000968 <FND_setFND_3+0xa8>)
 800095a:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fa24 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000028 	.word	0x20000028

0800096c <FND_setFND_4>:

void FND_setFND_4(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].offState);
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a27      	ldr	r2, [pc, #156]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000976:	8891      	ldrh	r1, [r2, #4]
 8000978:	4a26      	ldr	r2, [pc, #152]	@ (8000a14 <FND_setFND_4+0xa8>)
 800097a:	7a12      	ldrb	r2, [r2, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fa15 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 8000982:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000988:	8a11      	ldrh	r1, [r2, #16]
 800098a:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <FND_setFND_4+0xa8>)
 800098c:	7cd2      	ldrb	r2, [r2, #19]
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fa0c 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000994:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a1e      	ldr	r2, [pc, #120]	@ (8000a14 <FND_setFND_4+0xa8>)
 800099a:	8b91      	ldrh	r1, [r2, #28]
 800099c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <FND_setFND_4+0xa8>)
 800099e:	7fd2      	ldrb	r2, [r2, #31]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fa03 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].offState);
 80009a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009ac:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80009ae:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009b0:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f9f9 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009c0:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 80009c2:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009c4:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f9ef 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009d4:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 80009d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009da:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f9e4 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009ea:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 80009ee:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009f0:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f9d9 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <FND_setFND_4+0xa8>)
 80009fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000a00:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000a04:	4a03      	ldr	r2, [pc, #12]	@ (8000a14 <FND_setFND_4+0xa8>)
 8000a06:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f9ce 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000028 	.word	0x20000028

08000a18 <FND_setFND_5>:

void FND_setFND_5(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000a1c:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a27      	ldr	r2, [pc, #156]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a22:	8891      	ldrh	r1, [r2, #4]
 8000a24:	4a26      	ldr	r2, [pc, #152]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a26:	79d2      	ldrb	r2, [r2, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 f9bf 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].offState);
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a34:	8a11      	ldrh	r1, [r2, #16]
 8000a36:	4a22      	ldr	r2, [pc, #136]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a38:	7d12      	ldrb	r2, [r2, #20]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f9b6 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a46:	8b91      	ldrh	r1, [r2, #28]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a4a:	7fd2      	ldrb	r2, [r2, #31]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 f9ad 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a58:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000a5a:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a5c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f9a3 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a6c:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a70:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f999 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a80:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000a84:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a86:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f98e 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a96:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000a9c:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f983 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000aac:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <FND_setFND_5+0xa8>)
 8000ab2:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f978 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000028 	.word	0x20000028

08000ac4 <FND_setFND_6>:

void FND_setFND_6(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000ac8:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a27      	ldr	r2, [pc, #156]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000ace:	8891      	ldrh	r1, [r2, #4]
 8000ad0:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000ad2:	79d2      	ldrb	r2, [r2, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 f969 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].offState);
 8000ada:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000ae0:	8a11      	ldrh	r1, [r2, #16]
 8000ae2:	4a22      	ldr	r2, [pc, #136]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000ae4:	7d12      	ldrb	r2, [r2, #20]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f960 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000af2:	8b91      	ldrh	r1, [r2, #28]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000af6:	7fd2      	ldrb	r2, [r2, #31]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f957 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b04:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b08:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f94d 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].onState);
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b18:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b1c:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 f943 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b2a:	4a10      	ldr	r2, [pc, #64]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b2c:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000b30:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b32:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f938 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b42:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b48:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f92d 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b58:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000b5c:	4a03      	ldr	r2, [pc, #12]	@ (8000b6c <FND_setFND_6+0xa8>)
 8000b5e:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f922 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000028 	.word	0x20000028

08000b70 <FND_setFND_7>:

void FND_setFND_7(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a27      	ldr	r2, [pc, #156]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b7a:	8891      	ldrh	r1, [r2, #4]
 8000b7c:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b7e:	79d2      	ldrb	r2, [r2, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f913 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b8c:	8a11      	ldrh	r1, [r2, #16]
 8000b8e:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b90:	7cd2      	ldrb	r2, [r2, #19]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f90a 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000b9e:	8b91      	ldrh	r1, [r2, #28]
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000ba2:	7fd2      	ldrb	r2, [r2, #31]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 f901 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].offState);
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bae:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bb0:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000bb2:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bb4:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f8f7 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bc4:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bc8:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f8ed 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].offState);
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bd8:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bde:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f8e2 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].offState);
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bee:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000bf4:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 f8d7 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000c04:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <FND_setFND_7+0xa8>)
 8000c0a:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f8cc 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000028 	.word	0x20000028

08000c1c <FND_setFND_8>:

void FND_setFND_8(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000c20:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a27      	ldr	r2, [pc, #156]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c26:	8891      	ldrh	r1, [r2, #4]
 8000c28:	4a26      	ldr	r2, [pc, #152]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c2a:	79d2      	ldrb	r2, [r2, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 f8bd 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 8000c32:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c38:	8a11      	ldrh	r1, [r2, #16]
 8000c3a:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c3c:	7cd2      	ldrb	r2, [r2, #19]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f8b4 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c4a:	8b91      	ldrh	r1, [r2, #28]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c4e:	7fd2      	ldrb	r2, [r2, #31]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f8ab 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c5c:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000c5e:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c60:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 f8a1 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].onState);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c70:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c74:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 f897 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c84:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000c88:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c8a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 f88c 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000c9a:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000ca0:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f881 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000cb0:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000cb4:	4a03      	ldr	r2, [pc, #12]	@ (8000cc4 <FND_setFND_8+0xa8>)
 8000cb6:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 f876 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000028 	.word	0x20000028

08000cc8 <FND_setFND_9>:

void FND_setFND_9(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fnd[0].gpioPort, fnd[0].pinNumber, fnd[0].onState);
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a27      	ldr	r2, [pc, #156]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cd2:	8891      	ldrh	r1, [r2, #4]
 8000cd4:	4a26      	ldr	r2, [pc, #152]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cd6:	79d2      	ldrb	r2, [r2, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f867 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[1].gpioPort, fnd[1].pinNumber, fnd[1].onState);
 8000cde:	4b24      	ldr	r3, [pc, #144]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000ce4:	8a11      	ldrh	r1, [r2, #16]
 8000ce6:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000ce8:	7cd2      	ldrb	r2, [r2, #19]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f85e 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[2].gpioPort, fnd[2].pinNumber, fnd[2].onState);
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cf6:	8b91      	ldrh	r1, [r2, #28]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000cfa:	7fd2      	ldrb	r2, [r2, #31]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 f855 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[3].gpioPort, fnd[3].pinNumber, fnd[3].onState);
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	4a1a      	ldr	r2, [pc, #104]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d08:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8000d0a:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d0c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 f84b 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[4].gpioPort, fnd[4].pinNumber, fnd[4].offState);
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a15      	ldr	r2, [pc, #84]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d1c:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d20:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 f841 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[5].gpioPort, fnd[5].pinNumber, fnd[5].onState);
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d30:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 8000d34:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d36:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f836 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[6].gpioPort, fnd[6].pinNumber, fnd[6].onState);
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d46:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000d4a:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d4c:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 f82b 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fnd[7].gpioPort, fnd[7].pinNumber, fnd[7].offState);
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d5c:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <FND_setFND_9+0xa8>)
 8000d62:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f820 	bl	8001dac <HAL_GPIO_WritePin>
};
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000028 	.word	0x20000028

08000d74 <HE_init>:

uint8_t currentFloor;
uint8_t nextFloor;
bool floorQueue[4];

void HE_init(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	currentFloor = FLOOR_1;
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HE_init+0x34>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
	nextFloor = FLOOR_1;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HE_init+0x38>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	floorQueue[0] = false;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HE_init+0x3c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
	floorQueue[1] = false;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HE_init+0x3c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	705a      	strb	r2, [r3, #1]
	floorQueue[2] = false;
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <HE_init+0x3c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	709a      	strb	r2, [r3, #2]
	floorQueue[3] = false;
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HE_init+0x3c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	70da      	strb	r2, [r3, #3]
	STEP_init();
 8000d9c:	f000 f8b2 	bl	8000f04 <STEP_init>
	HE_ledControl();
 8000da0:	f000 f808 	bl	8000db4 <HE_ledControl>
};
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000089 	.word	0x20000089
 8000dac:	2000008a 	.word	0x2000008a
 8000db0:	2000008c 	.word	0x2000008c

08000db4 <HE_ledControl>:

void HE_ledControl(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_CH, LED_1_Pin, floorQueue[0]);
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HE_ledControl+0x40>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <HE_ledControl+0x44>)
 8000dc2:	f000 fff3 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_CH, LED_2_Pin, floorQueue[1]);
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HE_ledControl+0x40>)
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2120      	movs	r1, #32
 8000dce:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <HE_ledControl+0x44>)
 8000dd0:	f000 ffec 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_CH, LED_3_Pin, floorQueue[2]);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HE_ledControl+0x40>)
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <HE_ledControl+0x44>)
 8000dde:	f000 ffe5 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_CH, LED_4_Pin, floorQueue[3]);
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HE_ledControl+0x40>)
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2110      	movs	r1, #16
 8000dea:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <HE_ledControl+0x48>)
 8000dec:	f000 ffde 	bl	8001dac <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000008c 	.word	0x2000008c
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800

08000e00 <HE_enqueue>:

void HE_enqueue(uint8_t floorNumber){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	floorQueue[floorNumber - 1] = true;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HE_enqueue+0x20>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	54d1      	strb	r1, [r2, r3]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	2000008c 	.word	0x2000008c

08000e24 <HE_dequeue>:

void HE_dequeue(uint8_t floorNumber){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	floorQueue[floorNumber - 1] = false;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HE_dequeue+0x20>)
 8000e34:	2100      	movs	r1, #0
 8000e36:	54d1      	strb	r1, [r2, r3]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	2000008c 	.word	0x2000008c

08000e48 <HE_searchNearestFloor>:

void HE_searchNearestFloor(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t minDistance = 4; // Start as maximum value + 1. if 3, 1 -> 4 ignored
 8000e4e:	2304      	movs	r3, #4
 8000e50:	73fb      	strb	r3, [r7, #15]
	uint8_t queuedFloor = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
	uint8_t difference = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71bb      	strb	r3, [r7, #6]
	for (int var = 0; var < 4; ++var) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	e025      	b.n	8000eac <HE_searchNearestFloor+0x64>
//
		if (floorQueue[var]){
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HE_searchNearestFloor+0x74>)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d01c      	beq.n	8000ea6 <HE_searchNearestFloor+0x5e>
			queuedFloor = var + 1;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
			difference = HW_abs(currentFloor, queuedFloor);
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HE_searchNearestFloor+0x78>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f8ed 	bl	800105c <HW_abs>
 8000e82:	4603      	mov	r3, r0
 8000e84:	71bb      	strb	r3, [r7, #6]
			if 		(difference == minDistance || difference == 0){
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d00b      	beq.n	8000ea6 <HE_searchNearestFloor+0x5e>
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <HE_searchNearestFloor+0x5e>
//					Minimum Distance in floorQueue already exists
//					Updating and determining of nextFloor should be ignored
//					Just after arriving to desired nextFloor, search NN again
			}
			else if (difference < minDistance){
 8000e94:	79ba      	ldrb	r2, [r7, #6]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d204      	bcs.n	8000ea6 <HE_searchNearestFloor+0x5e>
				minDistance = difference;
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	73fb      	strb	r3, [r7, #15]
				nextFloor = queuedFloor;
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HE_searchNearestFloor+0x7c>)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	7013      	strb	r3, [r2, #0]
	for (int var = 0; var < 4; ++var) {
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	ddd6      	ble.n	8000e60 <HE_searchNearestFloor+0x18>
			}
		}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000008c 	.word	0x2000008c
 8000ec0:	20000089 	.word	0x20000089
 8000ec4:	2000008a 	.word	0x2000008a

08000ec8 <HE_run>:

void HE_run(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if 		(currentFloor > nextFloor){
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HE_run+0x34>)
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HE_run+0x38>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d902      	bls.n	8000ede <HE_run+0x16>
		STEP_unitStepCCW();
 8000ed8:	f000 f89a 	bl	8001010 <STEP_unitStepCCW>
 8000edc:	e007      	b.n	8000eee <HE_run+0x26>
	}
	else if (currentFloor < nextFloor){
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HE_run+0x34>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <HE_run+0x38>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d201      	bcs.n	8000eee <HE_run+0x26>
		STEP_unitStepCW();
 8000eea:	f000 f873 	bl	8000fd4 <STEP_unitStepCW>
	}
	FND_setDecimal(currentFloor);
 8000eee:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HE_run+0x34>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb96 	bl	8000624 <FND_setDecimal>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000089 	.word	0x20000089
 8000f00:	2000008a 	.word	0x2000008a

08000f04 <STEP_init>:
#include "stepMotor.h"

STEP step;
uint8_t nextStep;

void STEP_init(){
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	step.gpioPort 		= GPIOC;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <STEP_init+0x44>)
 8000f0a:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <STEP_init+0x48>)
 8000f0c:	601a      	str	r2, [r3, #0]
	step.pinIN1 		= GPIO_PIN_9;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <STEP_init+0x44>)
 8000f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f14:	809a      	strh	r2, [r3, #4]
	step.pinIN2 		= GPIO_PIN_8;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <STEP_init+0x44>)
 8000f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f1c:	80da      	strh	r2, [r3, #6]
	step.pinIN3 		= GPIO_PIN_6;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <STEP_init+0x44>)
 8000f20:	2240      	movs	r2, #64	@ 0x40
 8000f22:	811a      	strh	r2, [r3, #8]
	step.pinIN4 		= GPIO_PIN_5;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <STEP_init+0x44>)
 8000f26:	2220      	movs	r2, #32
 8000f28:	815a      	strh	r2, [r3, #10]
	step.direction		= STEP_DIR_CW;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <STEP_init+0x44>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	735a      	strb	r2, [r3, #13]
	step.currentStep	= 0;
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <STEP_init+0x44>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	731a      	strb	r2, [r3, #12]
	nextStep 			= 0;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <STEP_init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
};
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	200000a0 	.word	0x200000a0

08000f54 <STEP_setStep>:

void STEP_setStep(uint8_t steps){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(step.gpioPort, step.pinIN1, HALF_STEP_SEQ[steps][0]);
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <STEP_setStep+0x78>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <STEP_setStep+0x78>)
 8000f64:	8899      	ldrh	r1, [r3, #4]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <STEP_setStep+0x7c>)
 8000f6a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f000 ff1c 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(step.gpioPort, step.pinIN2, HALF_STEP_SEQ[steps][1]);
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <STEP_setStep+0x78>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <STEP_setStep+0x78>)
 8000f7a:	88d9      	ldrh	r1, [r3, #6]
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <STEP_setStep+0x7c>)
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f000 ff10 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(step.gpioPort, step.pinIN3, HALF_STEP_SEQ[steps][2]);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <STEP_setStep+0x78>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <STEP_setStep+0x78>)
 8000f92:	8919      	ldrh	r1, [r3, #8]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd0 <STEP_setStep+0x7c>)
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f000 ff04 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(step.gpioPort, step.pinIN4, HALF_STEP_SEQ[steps][3]);
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <STEP_setStep+0x78>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <STEP_setStep+0x78>)
 8000faa:	8959      	ldrh	r1, [r3, #10]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <STEP_setStep+0x7c>)
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f000 fef8 	bl	8001dac <HAL_GPIO_WritePin>
	step.currentStep = steps;
 8000fbc:	4a03      	ldr	r2, [pc, #12]	@ (8000fcc <STEP_setStep+0x78>)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	7313      	strb	r3, [r2, #12]
};
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000090 	.word	0x20000090
 8000fd0:	08002ff4 	.word	0x08002ff4

08000fd4 <STEP_unitStepCW>:

void STEP_unitStepCW(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if (nextStep == MAX_STEP_NUM){
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <STEP_unitStepCW+0x38>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d103      	bne.n	8000fe8 <STEP_unitStepCW+0x14>
		nextStep = 0;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <STEP_unitStepCW+0x38>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <STEP_unitStepCW+0x20>
	}
	else {
		nextStep++;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <STEP_unitStepCW+0x38>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <STEP_unitStepCW+0x38>)
 8000ff2:	701a      	strb	r2, [r3, #0]
	}
	STEP_setStep(nextStep);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <STEP_unitStepCW+0x38>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffab 	bl	8000f54 <STEP_setStep>
	delay_us(900);
 8000ffe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001002:	f000 f847 	bl	8001094 <delay_us>
};
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000a0 	.word	0x200000a0

08001010 <STEP_unitStepCCW>:

void STEP_unitStepCCW(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	if (nextStep == 0){
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <STEP_unitStepCCW+0x38>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <STEP_unitStepCCW+0x14>
		nextStep = MAX_STEP_NUM;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <STEP_unitStepCCW+0x38>)
 800101e:	2207      	movs	r2, #7
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e005      	b.n	8001030 <STEP_unitStepCCW+0x20>
	}
	else {
		nextStep--;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <STEP_unitStepCCW+0x38>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <STEP_unitStepCCW+0x38>)
 800102e:	701a      	strb	r2, [r3, #0]
	}
	STEP_setStep(nextStep);
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <STEP_unitStepCCW+0x38>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff8d 	bl	8000f54 <STEP_setStep>
	delay_us(900);
 800103a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800103e:	f000 f829 	bl	8001094 <delay_us>
};
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000a0 	.word	0x200000a0

0800104c <HW_init>:

//Declared at uart.c
//Declared Externally for initialize
extern uint8_t rxData;

void HW_init(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	FND_init();
 8001050:	f7ff fa46 	bl	80004e0 <FND_init>
//	BUTTON_init();
	HE_init();
 8001054:	f7ff fe8e 	bl	8000d74 <HE_init>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <HW_abs>:

uint32_t millis(void){
	return HAL_GetTick();
};

uint8_t HW_abs(uint8_t x, uint8_t y){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	if (x >= y) return x - y;
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	429a      	cmp	r2, r3
 8001072:	d304      	bcc.n	800107e <HW_abs+0x22>
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e003      	b.n	8001086 <HW_abs+0x2a>
	else 		return y - x;
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	b2db      	uxtb	r3, r3
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <delay_us>:
 *      Author: Lee JaePyeong
 */

#include "delay.h"

void delay_us (uint16_t us){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);			// Reset Timer/Counter10
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <delay_us+0x34>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim10);				// Start Timer/Counter10
 80010a6:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <delay_us+0x34>)
 80010a8:	f001 fb9a 	bl	80027e0 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us){	// Compare Timer/Counter10 Value
 80010ac:	bf00      	nop
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <delay_us+0x34>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3f9      	bcc.n	80010ae <delay_us+0x1a>
		;
	}
	HAL_TIM_Base_Stop(&htim10);					// Stop Timer/Counter10
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <delay_us+0x34>)
 80010bc:	f001 fbea 	bl	8002894 <HAL_TIM_Base_Stop>
};
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000a4 	.word	0x200000a4

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <MX_GPIO_Init+0x1d0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a6c      	ldr	r2, [pc, #432]	@ (800129c <MX_GPIO_Init+0x1d0>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b6a      	ldr	r3, [pc, #424]	@ (800129c <MX_GPIO_Init+0x1d0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b66      	ldr	r3, [pc, #408]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a65      	ldr	r2, [pc, #404]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b63      	ldr	r3, [pc, #396]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b5f      	ldr	r3, [pc, #380]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a5e      	ldr	r2, [pc, #376]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <MX_GPIO_Init+0x1d0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b58      	ldr	r3, [pc, #352]	@ (800129c <MX_GPIO_Init+0x1d0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a57      	ldr	r2, [pc, #348]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b55      	ldr	r3, [pc, #340]	@ (800129c <MX_GPIO_Init+0x1d0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FND_0_Pin|FND_1_Pin|FND_2_Pin|FND_6_Pin
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001158:	4851      	ldr	r0, [pc, #324]	@ (80012a0 <MX_GPIO_Init+0x1d4>)
 800115a:	f000 fe27 	bl	8001dac <HAL_GPIO_WritePin>
                          |FND_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_4_Pin|STEP_4_Pin|STEP_3_Pin|FND_4_Pin
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8001164:	484f      	ldr	r0, [pc, #316]	@ (80012a4 <MX_GPIO_Init+0x1d8>)
 8001166:	f000 fe21 	bl	8001dac <HAL_GPIO_WritePin>
                          |STEP_2_Pin|STEP_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_7_Pin|LED_3_Pin|LED_1_Pin|LED_2_Pin
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001170:	484d      	ldr	r0, [pc, #308]	@ (80012a8 <MX_GPIO_Init+0x1dc>)
 8001172:	f000 fe1b 	bl	8001dac <HAL_GPIO_WritePin>
                          |FND_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PHOTO_INT_2_Pin|PHOTO_INT_3_Pin;
 8001176:	230c      	movs	r3, #12
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4846      	ldr	r0, [pc, #280]	@ (80012a4 <MX_GPIO_Init+0x1d8>)
 800118c:	f000 fc8a 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_INT_1_Pin|BUTTON_INT_2_Pin|BUTTON_INT_4_Pin;
 8001190:	f240 4312 	movw	r3, #1042	@ 0x412
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	483e      	ldr	r0, [pc, #248]	@ (80012a0 <MX_GPIO_Init+0x1d4>)
 80011a8:	f000 fc7c 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = FND_0_Pin|FND_1_Pin|FND_2_Pin|FND_6_Pin
 80011ac:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80011b0:	617b      	str	r3, [r7, #20]
                          |FND_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4836      	ldr	r0, [pc, #216]	@ (80012a0 <MX_GPIO_Init+0x1d4>)
 80011c6:	f000 fc6d 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_4_Pin|STEP_4_Pin|STEP_3_Pin|FND_4_Pin
 80011ca:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80011ce:	617b      	str	r3, [r7, #20]
                          |STEP_2_Pin|STEP_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4830      	ldr	r0, [pc, #192]	@ (80012a4 <MX_GPIO_Init+0x1d8>)
 80011e4:	f000 fc5e 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_INT_3_Pin|PHOTO_INT_1_Pin|PHOTO_INT_4_Pin;
 80011e8:	f240 1381 	movw	r3, #385	@ 0x181
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	482a      	ldr	r0, [pc, #168]	@ (80012a8 <MX_GPIO_Init+0x1dc>)
 8001200:	f000 fc50 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = FND_7_Pin|LED_3_Pin|LED_1_Pin|LED_2_Pin
 8001204:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8001208:	617b      	str	r3, [r7, #20]
                          |FND_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4822      	ldr	r0, [pc, #136]	@ (80012a8 <MX_GPIO_Init+0x1dc>)
 800121e:	f000 fc41 	bl	8001aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2006      	movs	r0, #6
 8001228:	f000 fc05 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122c:	2006      	movs	r0, #6
 800122e:	f000 fc1e 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2007      	movs	r0, #7
 8001238:	f000 fbfd 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800123c:	2007      	movs	r0, #7
 800123e:	f000 fc16 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2008      	movs	r0, #8
 8001248:	f000 fbf5 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800124c:	2008      	movs	r0, #8
 800124e:	f000 fc0e 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2009      	movs	r0, #9
 8001258:	f000 fbed 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800125c:	2009      	movs	r0, #9
 800125e:	f000 fc06 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	200a      	movs	r0, #10
 8001268:	f000 fbe5 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800126c:	200a      	movs	r0, #10
 800126e:	f000 fbfe 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2017      	movs	r0, #23
 8001278:	f000 fbdd 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127c:	2017      	movs	r0, #23
 800127e:	f000 fbf6 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2028      	movs	r0, #40	@ 0x28
 8001288:	f000 fbd5 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800128c:	2028      	movs	r0, #40	@ 0x28
 800128e:	f000 fbee 	bl	8001a6e <HAL_NVIC_EnableIRQ>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020400 	.word	0x40020400

080012ac <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012bc:	d041      	beq.n	8001342 <HAL_GPIO_EXTI_Callback+0x96>
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c2:	dc5e      	bgt.n	8001382 <HAL_GPIO_EXTI_Callback+0xd6>
 80012c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012c8:	d054      	beq.n	8001374 <HAL_GPIO_EXTI_Callback+0xc8>
 80012ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ce:	dc58      	bgt.n	8001382 <HAL_GPIO_EXTI_Callback+0xd6>
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	dc27      	bgt.n	8001324 <HAL_GPIO_EXTI_Callback+0x78>
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd54      	ble.n	8001382 <HAL_GPIO_EXTI_Callback+0xd6>
 80012d8:	3b01      	subs	r3, #1
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	d851      	bhi.n	8001382 <HAL_GPIO_EXTI_Callback+0xd6>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <HAL_GPIO_EXTI_Callback+0x38>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	0800133b 	.word	0x0800133b
 80012e8:	0800132b 	.word	0x0800132b
 80012ec:	08001383 	.word	0x08001383
 80012f0:	08001359 	.word	0x08001359
 80012f4:	08001383 	.word	0x08001383
 80012f8:	08001383 	.word	0x08001383
 80012fc:	08001383 	.word	0x08001383
 8001300:	08001367 	.word	0x08001367
 8001304:	08001383 	.word	0x08001383
 8001308:	08001383 	.word	0x08001383
 800130c:	08001383 	.word	0x08001383
 8001310:	08001383 	.word	0x08001383
 8001314:	08001383 	.word	0x08001383
 8001318:	08001383 	.word	0x08001383
 800131c:	08001383 	.word	0x08001383
 8001320:	08001333 	.word	0x08001333
 8001324:	2b80      	cmp	r3, #128	@ 0x80
 8001326:	d010      	beq.n	800134a <HAL_GPIO_EXTI_Callback+0x9e>
				currentFloor = FLOOR_4;
			break;

//		DEFAULT
		default :
			break;
 8001328:	e02b      	b.n	8001382 <HAL_GPIO_EXTI_Callback+0xd6>
				HE_enqueue(FLOOR_1);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fd68 	bl	8000e00 <HE_enqueue>
			break;
 8001330:	e028      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_enqueue(FLOOR_2);
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff fd64 	bl	8000e00 <HE_enqueue>
			break;
 8001338:	e024      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_enqueue(FLOOR_3);
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff fd60 	bl	8000e00 <HE_enqueue>
			break;
 8001340:	e020      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_enqueue(FLOOR_4);
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff fd5c 	bl	8000e00 <HE_enqueue>
			break;
 8001348:	e01c      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_dequeue(FLOOR_1);
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fd6a 	bl	8000e24 <HE_dequeue>
				currentFloor = FLOOR_1;
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
			break;
 8001356:	e015      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_dequeue(FLOOR_2);
 8001358:	2002      	movs	r0, #2
 800135a:	f7ff fd63 	bl	8000e24 <HE_dequeue>
				currentFloor = FLOOR_2;
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001360:	2202      	movs	r2, #2
 8001362:	701a      	strb	r2, [r3, #0]
			break;
 8001364:	e00e      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_dequeue(FLOOR_3);
 8001366:	2003      	movs	r0, #3
 8001368:	f7ff fd5c 	bl	8000e24 <HE_dequeue>
				currentFloor = FLOOR_3;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xe8>)
 800136e:	2203      	movs	r2, #3
 8001370:	701a      	strb	r2, [r3, #0]
			break;
 8001372:	e007      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
				HE_dequeue(FLOOR_4);
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fd55 	bl	8000e24 <HE_dequeue>
				currentFloor = FLOOR_4;
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xe8>)
 800137c:	2204      	movs	r2, #4
 800137e:	701a      	strb	r2, [r3, #0]
			break;
 8001380:	e000      	b.n	8001384 <HAL_GPIO_EXTI_Callback+0xd8>
			break;
 8001382:	bf00      	nop
	};
	HE_ledControl();
 8001384:	f7ff fd16 	bl	8000db4 <HE_ledControl>
	HE_searchNearestFloor();
 8001388:	f7ff fd5e 	bl	8000e48 <HE_searchNearestFloor>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000089 	.word	0x20000089

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 f9fe 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f80c 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f7ff fe92 	bl	80010cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013a8:	f000 f95c 	bl	8001664 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80013ac:	f000 f914 	bl	80015d8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  AP_setup();
 80013b0:	f7ff f88a 	bl	80004c8 <AP_setup>
  AP_loop();
 80013b4:	f7ff f88e 	bl	80004d4 <AP_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <main+0x20>

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	@ 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	@ 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fdda 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <SystemClock_Config+0xc8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a26      	ldr	r2, [pc, #152]	@ (8001484 <SystemClock_Config+0xc8>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <SystemClock_Config+0xc8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <SystemClock_Config+0xcc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a20      	ldr	r2, [pc, #128]	@ (8001488 <SystemClock_Config+0xcc>)
 8001406:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <SystemClock_Config+0xcc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001430:	2364      	movs	r3, #100	@ 0x64
 8001432:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fce5 	bl	8001e10 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800144c:	f000 f81e 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2103      	movs	r1, #3
 800146c:	4618      	mov	r0, r3
 800146e:	f000 ff47 	bl	8002300 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001478:	f000 f808 	bl	800148c <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	@ 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <Error_Handler+0x8>

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a0f      	ldr	r2, [pc, #60]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 f97f 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}

08001546 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT_3_Pin);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fc48 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT_1_Pin);
 8001558:	2002      	movs	r0, #2
 800155a:	f000 fc41 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}

08001562 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO_INT_2_Pin);
 8001566:	2004      	movs	r0, #4
 8001568:	f000 fc3a 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO_INT_3_Pin);
 8001574:	2008      	movs	r0, #8
 8001576:	f000 fc33 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT_2_Pin);
 8001582:	2010      	movs	r0, #16
 8001584:	f000 fc2c 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO_INT_1_Pin);
 8001590:	2080      	movs	r0, #128	@ 0x80
 8001592:	f000 fc25 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PHOTO_INT_4_Pin);
 8001596:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800159a:	f000 fc21 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT_4_Pin);
 80015a6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015aa:	f000 fc19 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015de:	4a0f      	ldr	r2, [pc, #60]	@ (800161c <MX_TIM10_Init+0x44>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015e4:	2263      	movs	r2, #99	@ 0x63
 80015e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_TIM10_Init+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_TIM10_Init+0x40>)
 8001604:	f001 f89c 	bl	8002740 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800160e:	f7ff ff3d 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000a4 	.word	0x200000a4
 800161c:	40014400 	.word	0x40014400

08001620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_TIM_Base_MspInit+0x3c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10d      	bne.n	800164e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_TIM_Base_MspInit+0x40>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <HAL_TIM_Base_MspInit+0x40>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <HAL_TIM_Base_MspInit+0x40>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40014400 	.word	0x40014400
 8001660:	40023800 	.word	0x40023800

08001664 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <MX_USART2_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_USART2_UART_Init+0x4c>)
 800169c:	f001 f9ae 	bl	80029fc <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f7ff fef1 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000ec 	.word	0x200000ec
 80016b4:	40004400 	.word	0x40004400

080016b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	@ (800173c <HAL_UART_MspInit+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12b      	bne.n	8001732 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a17      	ldr	r2, [pc, #92]	@ (8001740 <HAL_UART_MspInit+0x88>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_UART_MspInit+0x88>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001712:	230c      	movs	r3, #12
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001722:	2307      	movs	r3, #7
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_UART_MspInit+0x8c>)
 800172e:	f000 f9b9 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40004400 	.word	0x40004400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174c:	f7ff ff32 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f001 fc0d 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fe0d 	bl	8001398 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800178c:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 8001790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001794:	20000138 	.word	0x20000138

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f92b 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe62 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f943 	bl	8001a8a <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f90b 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	20000008 	.word	0x20000008
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	20000134 	.word	0x20000134

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000134 	.word	0x20000134

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	@ (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e159      	b.n	8001d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8148 	bne.w	8001d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b57      	ldr	r3, [pc, #348]	@ (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a56      	ldr	r2, [pc, #344]	@ (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b54      	ldr	r3, [pc, #336]	@ (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a52      	ldr	r2, [pc, #328]	@ (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	@ (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	@ (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	@ (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <HAL_GPIO_Init+0x300>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x1f2>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f aea2 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fa54 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e267      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b85      	ldr	r3, [pc, #532]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b82      	ldr	r3, [pc, #520]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b7e      	ldr	r3, [pc, #504]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e242      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6f      	ldr	r2, [pc, #444]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b69      	ldr	r3, [pc, #420]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a68      	ldr	r2, [pc, #416]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a65      	ldr	r2, [pc, #404]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fcce 	bl	8001868 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fcca 	bl	8001868 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e207      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fcba 	bl	8001868 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fcb6 	bl	8001868 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f3      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b51      	ldr	r3, [pc, #324]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c7      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fc6f 	bl	8001868 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fc6b 	bl	8001868 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a8      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4925      	ldr	r1, [pc, #148]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fc4e 	bl	8001868 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc4a 	bl	8001868 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e187      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d036      	beq.n	8002068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fc2e 	bl	8001868 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fc2a 	bl	8001868 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e167      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e01b      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fc17 	bl	8001868 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e00e      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fc13 	bl	8001868 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d907      	bls.n	800205c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e150      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b88      	ldr	r3, [pc, #544]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ea      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8097 	beq.w	80021a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b81      	ldr	r3, [pc, #516]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a7c      	ldr	r2, [pc, #496]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b7a      	ldr	r3, [pc, #488]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b74      	ldr	r3, [pc, #464]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a73      	ldr	r2, [pc, #460]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7ff fbd3 	bl	8001868 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7ff fbcf 	bl	8001868 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e10c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ea>
 80020ec:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a63      	ldr	r2, [pc, #396]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x30c>
 8002102:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	4a5e      	ldr	r2, [pc, #376]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	@ 0x70
 800210e:	4b5c      	ldr	r3, [pc, #368]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	@ 0x70
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	4a57      	ldr	r2, [pc, #348]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70
 8002128:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a54      	ldr	r2, [pc, #336]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fb94 	bl	8001868 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff fb90 	bl	8001868 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0cb      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCC_OscConfig+0x334>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fb7e 	bl	8001868 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff fb7a 	bl	8001868 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b5      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a38      	ldr	r2, [pc, #224]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a1 	beq.w	80022f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ae:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d05c      	beq.n	8002274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d141      	bne.n	8002246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fb4e 	bl	8001868 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb4a 	bl	8001868 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e087      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	3b01      	subs	r3, #1
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	491b      	ldr	r1, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fb23 	bl	8001868 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff fb1f 	bl	8001868 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e05c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x416>
 8002244:	e054      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fb0c 	bl	8001868 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff fb08 	bl	8001868 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e045      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e038      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4ec>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d028      	beq.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa3a 	bl	8001868 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa36 	bl	8001868 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f99a 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08003014 	.word	0x08003014
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b094      	sub	sp, #80	@ 0x50
 80024d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024dc:	2300      	movs	r3, #0
 80024de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4b79      	ldr	r3, [pc, #484]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	f200 80e1 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x34>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002504:	e0db      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800250a:	e0d8      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800252c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
 800253a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002570:	4659      	mov	r1, fp
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4651      	mov	r1, sl
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4651      	mov	r1, sl
 8002580:	ebb2 0801 	subs.w	r8, r2, r1
 8002584:	4659      	mov	r1, fp
 8002586:	eb63 0901 	sbc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb49 0303 	adc.w	r3, r9, r3
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025be:	4629      	mov	r1, r5
 80025c0:	024b      	lsls	r3, r1, #9
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c8:	4621      	mov	r1, r4
 80025ca:	024a      	lsls	r2, r1, #9
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025dc:	f7fd fdfc 	bl	80001d8 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e058      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4611      	mov	r1, r2
 80025f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002616:	0150      	lsls	r0, r2, #5
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4641      	mov	r1, r8
 800261e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb63 0b01 	sbc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800263c:	ebb2 040a 	subs.w	r4, r2, sl
 8002640:	eb63 050b 	sbc.w	r5, r3, fp
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	f7fd fda2 	bl	80001d8 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80026ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3750      	adds	r7, #80	@ 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08003024 	.word	0x08003024

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff ffdc 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0b5b      	lsrs	r3, r3, #13
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	08003024 	.word	0x08003024

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe ff5a 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 f8b0 	bl	80028e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e03c      	b.n	8002872 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <HAL_TIM_Base_Start+0xa0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002812:	d013      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <HAL_TIM_Base_Start+0xa4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_TIM_Base_Start+0xa8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a17      	ldr	r2, [pc, #92]	@ (800288c <HAL_TIM_Base_Start+0xac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_TIM_Base_Start+0xb0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b06      	cmp	r3, #6
 800284c:	d010      	beq.n	8002870 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	e007      	b.n	8002870 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40014000 	.word	0x40014000

08002894 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <HAL_TIM_Base_Stop+0x38>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_Base_Stop+0x38>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3a      	ldr	r2, [pc, #232]	@ (80029e0 <TIM_Base_SetConfig+0xfc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00f      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002902:	d00b      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a37      	ldr	r2, [pc, #220]	@ (80029e4 <TIM_Base_SetConfig+0x100>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a36      	ldr	r2, [pc, #216]	@ (80029e8 <TIM_Base_SetConfig+0x104>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a35      	ldr	r2, [pc, #212]	@ (80029ec <TIM_Base_SetConfig+0x108>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <TIM_Base_SetConfig+0xfc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a28      	ldr	r2, [pc, #160]	@ (80029e4 <TIM_Base_SetConfig+0x100>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a27      	ldr	r2, [pc, #156]	@ (80029e8 <TIM_Base_SetConfig+0x104>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <TIM_Base_SetConfig+0x108>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a25      	ldr	r2, [pc, #148]	@ (80029f0 <TIM_Base_SetConfig+0x10c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <TIM_Base_SetConfig+0x110>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a23      	ldr	r2, [pc, #140]	@ (80029f8 <TIM_Base_SetConfig+0x114>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <TIM_Base_SetConfig+0xfc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]
  }
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40014800 	.word	0x40014800

080029fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e042      	b.n	8002a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fe48 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	@ 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f82b 	bl	8002a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b0c0      	sub	sp, #256	@ 0x100
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	ea40 0301 	orr.w	r3, r0, r1
 8002ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002af4:	f021 010c 	bic.w	r1, r1, #12
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b02:	430b      	orrs	r3, r1
 8002b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	ea40 0301 	orr.w	r3, r0, r1
 8002b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8002d68 <UART_SetConfig+0x2cc>)
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d005      	beq.n	8002b3c <UART_SetConfig+0xa0>
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b8d      	ldr	r3, [pc, #564]	@ (8002d6c <UART_SetConfig+0x2d0>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d104      	bne.n	8002b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b3c:	f7ff fdec 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 8002b40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b44:	e003      	b.n	8002b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b46:	f7ff fdd3 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8002b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b58:	f040 810c 	bne.w	8002d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	1891      	adds	r1, r2, r2
 8002b74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b76:	415b      	adcs	r3, r3
 8002b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b7e:	4621      	mov	r1, r4
 8002b80:	eb12 0801 	adds.w	r8, r2, r1
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb43 0901 	adc.w	r9, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb18 0303 	adds.w	r3, r8, r3
 8002ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bac:	462b      	mov	r3, r5
 8002bae:	eb49 0303 	adc.w	r3, r9, r3
 8002bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bca:	460b      	mov	r3, r1
 8002bcc:	18db      	adds	r3, r3, r3
 8002bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	eb42 0303 	adc.w	r3, r2, r3
 8002bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002be0:	f7fd fafa 	bl	80001d8 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4b61      	ldr	r3, [pc, #388]	@ (8002d70 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2302 	umull	r2, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	011c      	lsls	r4, r3, #4
 8002bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	1891      	adds	r1, r2, r2
 8002c0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c0c:	415b      	adcs	r3, r3
 8002c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c14:	4641      	mov	r1, r8
 8002c16:	eb12 0a01 	adds.w	sl, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c34:	4692      	mov	sl, r2
 8002c36:	469b      	mov	fp, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb4b 0303 	adc.w	r3, fp, r3
 8002c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c60:	460b      	mov	r3, r1
 8002c62:	18db      	adds	r3, r3, r3
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c66:	4613      	mov	r3, r2
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c76:	f7fd faaf 	bl	80001d8 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <UART_SetConfig+0x2d4>)
 8002c82:	fba3 2301 	umull	r2, r3, r3, r1
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2264      	movs	r2, #100	@ 0x64
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	1acb      	subs	r3, r1, r3
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c96:	4b36      	ldr	r3, [pc, #216]	@ (8002d70 <UART_SetConfig+0x2d4>)
 8002c98:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ca4:	441c      	add	r4, r3
 8002ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cb8:	4642      	mov	r2, r8
 8002cba:	464b      	mov	r3, r9
 8002cbc:	1891      	adds	r1, r2, r2
 8002cbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cc0:	415b      	adcs	r3, r3
 8002cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cc8:	4641      	mov	r1, r8
 8002cca:	1851      	adds	r1, r2, r1
 8002ccc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cce:	4649      	mov	r1, r9
 8002cd0:	414b      	adcs	r3, r1
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	00cb      	lsls	r3, r1, #3
 8002ce4:	4651      	mov	r1, sl
 8002ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cea:	4651      	mov	r1, sl
 8002cec:	00ca      	lsls	r2, r1, #3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	460a      	mov	r2, r1
 8002d00:	eb42 0303 	adc.w	r3, r2, r3
 8002d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	18db      	adds	r3, r3, r3
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d22:	4613      	mov	r3, r2
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d32:	f7fd fa51 	bl	80001d8 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <UART_SetConfig+0x2d4>)
 8002d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	2164      	movs	r1, #100	@ 0x64
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	3332      	adds	r3, #50	@ 0x32
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <UART_SetConfig+0x2d4>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	f003 0207 	and.w	r2, r3, #7
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4422      	add	r2, r4
 8002d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d64:	e106      	b.n	8002f74 <UART_SetConfig+0x4d8>
 8002d66:	bf00      	nop
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d86:	4642      	mov	r2, r8
 8002d88:	464b      	mov	r3, r9
 8002d8a:	1891      	adds	r1, r2, r2
 8002d8c:	6239      	str	r1, [r7, #32]
 8002d8e:	415b      	adcs	r3, r3
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d96:	4641      	mov	r1, r8
 8002d98:	1854      	adds	r4, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb43 0501 	adc.w	r5, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	00eb      	lsls	r3, r5, #3
 8002daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dae:	00e2      	lsls	r2, r4, #3
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	4643      	mov	r3, r8
 8002db6:	18e3      	adds	r3, r4, r3
 8002db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	eb45 0303 	adc.w	r3, r5, r3
 8002dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002de2:	4629      	mov	r1, r5
 8002de4:	008b      	lsls	r3, r1, #2
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dec:	4621      	mov	r1, r4
 8002dee:	008a      	lsls	r2, r1, #2
 8002df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002df4:	f7fd f9f0 	bl	80001d8 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4b60      	ldr	r3, [pc, #384]	@ (8002f80 <UART_SetConfig+0x4e4>)
 8002dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	011c      	lsls	r4, r3, #4
 8002e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e18:	4642      	mov	r2, r8
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	1891      	adds	r1, r2, r2
 8002e1e:	61b9      	str	r1, [r7, #24]
 8002e20:	415b      	adcs	r3, r3
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e28:	4641      	mov	r1, r8
 8002e2a:	1851      	adds	r1, r2, r1
 8002e2c:	6139      	str	r1, [r7, #16]
 8002e2e:	4649      	mov	r1, r9
 8002e30:	414b      	adcs	r3, r1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e40:	4659      	mov	r1, fp
 8002e42:	00cb      	lsls	r3, r1, #3
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	00ca      	lsls	r2, r1, #3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	4642      	mov	r2, r8
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	460a      	mov	r2, r1
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e80:	4649      	mov	r1, r9
 8002e82:	008b      	lsls	r3, r1, #2
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	008a      	lsls	r2, r1, #2
 8002e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e92:	f7fd f9a1 	bl	80001d8 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <UART_SetConfig+0x4e4>)
 8002e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2264      	movs	r2, #100	@ 0x64
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	1acb      	subs	r3, r1, r3
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	3332      	adds	r3, #50	@ 0x32
 8002eb0:	4a33      	ldr	r2, [pc, #204]	@ (8002f80 <UART_SetConfig+0x4e4>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ebc:	441c      	add	r4, r3
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ec6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ec8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ecc:	4642      	mov	r2, r8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	1891      	adds	r1, r2, r2
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	415b      	adcs	r3, r3
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002edc:	4641      	mov	r1, r8
 8002ede:	1851      	adds	r1, r2, r1
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	414b      	adcs	r3, r1
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	00cb      	lsls	r3, r1, #3
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efe:	4651      	mov	r1, sl
 8002f00:	00ca      	lsls	r2, r1, #3
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	4642      	mov	r2, r8
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f0e:	464b      	mov	r3, r9
 8002f10:	460a      	mov	r2, r1
 8002f12:	eb42 0303 	adc.w	r3, r2, r3
 8002f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f22:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f30:	4649      	mov	r1, r9
 8002f32:	008b      	lsls	r3, r1, #2
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	008a      	lsls	r2, r1, #2
 8002f3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f42:	f7fd f949 	bl	80001d8 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <UART_SetConfig+0x4e4>)
 8002f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	2164      	movs	r1, #100	@ 0x64
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	3332      	adds	r3, #50	@ 0x32
 8002f5e:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <UART_SetConfig+0x4e4>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4422      	add	r2, r4
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f80:	51eb851f 	.word	0x51eb851f

08002f84 <memset>:
 8002f84:	4402      	add	r2, r0
 8002f86:	4603      	mov	r3, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	@ (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f818 	bl	8002fdc <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003034 	.word	0x08003034
 8002fd0:	08003034 	.word	0x08003034
 8002fd4:	08003034 	.word	0x08003034
 8002fd8:	08003038 	.word	0x08003038

08002fdc <_init>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr

08002fe8 <_fini>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr
